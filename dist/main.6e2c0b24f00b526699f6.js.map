{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/es5-ext/object/is-value.js","webpack:///./node_modules/type/value/is.js","webpack:///./src/index.js","webpack:///./src/utils/mouse.js","webpack:///./node_modules/event-emitter/index.js","webpack:///./node_modules/d/index.js","webpack:///./node_modules/type/plain-function/is.js","webpack:///./node_modules/type/function/is.js","webpack:///./node_modules/type/prototype/is.js","webpack:///./node_modules/type/object/is.js","webpack:///./node_modules/es5-ext/object/assign/index.js","webpack:///./node_modules/es5-ext/object/assign/is-implemented.js","webpack:///./node_modules/es5-ext/object/assign/shim.js","webpack:///./node_modules/es5-ext/object/keys/index.js","webpack:///./node_modules/es5-ext/object/keys/is-implemented.js","webpack:///./node_modules/es5-ext/object/keys/shim.js","webpack:///./node_modules/es5-ext/function/noop.js","webpack:///./node_modules/es5-ext/object/valid-value.js","webpack:///./node_modules/es5-ext/object/normalize-options.js","webpack:///./node_modules/es5-ext/string/#/contains/index.js","webpack:///./node_modules/es5-ext/string/#/contains/is-implemented.js","webpack:///./node_modules/es5-ext/string/#/contains/shim.js","webpack:///./node_modules/es5-ext/object/valid-callable.js","webpack:///./src/utils/raf.js","webpack:///./src/utils/easing.js","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat2.js","webpack:///./node_modules/gl-matrix/esm/mat2d.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/quat2.js","webpack:///./node_modules/gl-matrix/esm/vec2.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_undefined","val","require","document","querySelector","getContext","console","log","Image","requestAnimationFrame","update","_VEC2","vec2","out","target","this","cursor","fromValues","lastCursor","velocity","dampedCursor","window","wheelVelocity","wheel","lastWheel","screenWidth","innerWidth","screenHeight","innerHeight","isDown","wheelDir","emitter","preventDamping","on","off","RAF","suscribe","initEvents","addEventListener","event","onDown","touches","onUp","preventDefault","onMouve","onWheel","emit","clientX","clientY","deltaX","deltaY","sub","scale","config","damping","add","once","methods","descriptors","base","callable","apply","Function","defineProperties","descriptor","configurable","writable","type","listener","self","arguments","__eeOnceListener__","data","__ee__","push","listeners","candidate","length","splice","args","Array","slice","isValue","isPlainFunction","assign","normalizeOpts","contains","dscr","e","w","options","desc","gs","set","undefined","isFunction","classRe","functionToString","toString","test","isPrototype","error","isObject","constructor","possibleTypes","obj","foo","bar","trzy","keys","max","Math","dest","src","forEach","TypeError","process","opts1","result","String","str","indexOf","searchString","fn","performance","Date","now","getTime","nowOffset","timing","navigationStart","funcs","lastPass","framerates","nextFramePendingFuncs","nextFrameFuncs","postFrameFuncs","dt","Infinity","timeElapsed","frame","dictonary","last","initTime","init","isIOS","navigator","platform","id","func","framerate","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","EPSILON","ARRAY_TYPE","Float32Array","RANDOM","random","setMatrixArrayType","degree","PI","toRadian","a","equals","b","abs","clone","copy","identity","m00","m01","m10","m11","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","v","v0","v1","fromRotation","fromScaling","frob","hypot","LDU","L","D","U","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","sqrt","mul","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","stride","offset","count","arg","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC"],"mappings":"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","file":"main.6e2c0b24f00b526699f6.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\"use strict\";\n\nvar _undefined = require(\"../function/noop\")(); // Support ES3 engines\n\nmodule.exports = function (val) { return val !== _undefined && val !== null; };\n","\"use strict\";\n\n// ES3 safe\nvar _undefined = void 0;\n\nmodule.exports = function (value) { return value !== _undefined && value !== null; };\n","\nrequire('normalize.css/normalize.css');\nrequire('./styles/index.scss');\n\nimport Mouse from \"./utils/mouse\"\nimport Easing from \"./utils/easing\"\n\n\n\nconst canvas = document.querySelector('.main-canvas')\nconst ctx = canvas.getContext(\"2d\")\n\nconsole.log(Image);\n\n\n// à chaque image : 60fps\nconst update = ()=>{\n    requestAnimationFrame(update)\n\n    // fisrt scrolling floor \n\n}\nrequestAnimationFrame(update)\n\n","import { vec2, vec3 } from 'gl-matrix'\nimport Emitter from 'event-emitter'\nimport RAF from './raf'\n\nconst _VEC2 = vec2.create()\n\n\nclass Mouse {\n  constructor(target) {\n    this.cursor = vec2.fromValues(0, 0)\n    this.lastCursor = vec2.fromValues(0, 0)\n    this.velocity = vec2.fromValues(0, 0)\n    this.dampedCursor = vec2.fromValues(0.5, 0.5)\n\n    this.target         = target || window\n    this.wheelVelocity  = vec2.fromValues(0, 0)\n    this.wheel          = vec2.fromValues(0, 0)\n    this.lastWheel      = vec2.fromValues(0, 0)\n    this.screenWidth = window.innerWidth\n    this.screenHeight = window.innerHeight\n    this.isDown = false\n    this.wheelDir = null\n    this.emitter = {}\n\n    this.preventDamping = true\n\n    Emitter(this.emitter)\n    this.on = this.emitter.on.bind(this.emitter)\n    this.off = this.emitter.off.bind(this.emitter)\n\n    RAF.suscribe('mouse', () => { this.update() })\n\n    this.initEvents()\n  }\n\n  initEvents() {\n    this.target.addEventListener('touchstart', (event) => { this.onDown(event.touches[0]), { passive: false }})\n    this.target.addEventListener('touchend', (event) => { this.onUp(event.touches[0]), { passive: false }})\n    this.target.addEventListener('touchmove', (event) => { event.preventDefault(); this.onMouve(event.touches[0]), { passive: false }})\n\n    this.target.addEventListener('mousedown', (event) => { this.onDown(event) })\n    this.target.addEventListener('mousemove', (event) => { this.onMouve(event) })\n    this.target.addEventListener('mouseup', (event) => { this.onUp(event) })\n\n    this.target.addEventListener('wheel', (event) => { this.onWheel(event) })\n\n    this.target.addEventListener('click', () => { this.emitter.emit('click') })\n    this.target.addEventListener('resize', () => {\n      this.screenWidth = window.innerWidth\n      this.screenHeight = window.innerHeight\n    })\n  }\n\n  onDown(event) {\n    this.cursor[0] = (event.clientX / this.screenWidth - 0.5) * 2\n    this.cursor[1] = (event.clientY / this.screenHeight - 0.5) * 2\n    this.lastCursor[0] = this.cursor[0]\n    this.lastCursor[1] = this.cursor[1]\n    this.isDown = true\n    this.emitter.emit('down', this)\n  }\n\n  onUp(event) {\n    this.isDown = false\n    this.emitter.emit('up', this)\n  }\n\n  onWheel(event) {\n    this.lastWheel[0] = this.wheel[0]\n    this.lastWheel[1] = this.wheel[1]\n    this.wheel[0] = event.deltaX\n    this.wheel[1] = event.deltaY\n    this.wheelDir = event.deltaY < 0 ? \"up\" : \"down\"\n    this.emitter.emit('wheel', this)\n  }\n\n  onMouve(event) {\n    this.cursor[0] = (event.clientX / this.screenWidth - 0.5) * 2\n    this.cursor[1] = (event.clientY / this.screenHeight - 0.5) * 2\n    this.emitter.emit('mouve', this)\n    if (this.isDown) { this.emitter.emit('drag', this) }\n  }\n\n  update() {\n    this.velocity[0] = this.cursor[0] - this.lastCursor[0]\n    this.velocity[1] = this.cursor[1] - this.lastCursor[1]\n    this.wheelVelocity[0] = this.wheel[0] - this.lastWheel[0]\n    this.wheelVelocity[1] = this.wheel[1] - this.lastWheel[1]\n    this.lastCursor[0] = this.cursor[0]\n    this.lastCursor[1] = this.cursor[1]\n\n    if (!this.preventDamping) {\n      vec2.sub(_VEC2, this.cursor, this.dampedCursor)\n      vec2.scale(_VEC2, _VEC2, this.config.damping.value)\n      vec2.add(this.dampedCursor, this.dampedCursor, _VEC2)\n    }\n\n\n\n  }\n}\n\nconst out = new Mouse()\nexport default out","'use strict';\n\nvar d        = require('d')\n  , callable = require('es5-ext/object/valid-callable')\n\n  , apply = Function.prototype.apply, call = Function.prototype.call\n  , create = Object.create, defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n  , on, once, off, emit, methods, descriptors, base;\n\non = function (type, listener) {\n\tvar data;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\tdata = descriptor.value = create(null);\n\t\tdefineProperty(this, '__ee__', descriptor);\n\t\tdescriptor.value = null;\n\t} else {\n\t\tdata = this.__ee__;\n\t}\n\tif (!data[type]) data[type] = listener;\n\telse if (typeof data[type] === 'object') data[type].push(listener);\n\telse data[type] = [data[type], listener];\n\n\treturn this;\n};\n\nonce = function (type, listener) {\n\tvar once, self;\n\n\tcallable(listener);\n\tself = this;\n\ton.call(this, type, once = function () {\n\t\toff.call(self, type, once);\n\t\tapply.call(listener, this, arguments);\n\t});\n\n\tonce.__eeOnceListener__ = listener;\n\treturn this;\n};\n\noff = function (type, listener) {\n\tvar data, listeners, candidate, i;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\tdata = this.__ee__;\n\tif (!data[type]) return this;\n\tlisteners = data[type];\n\n\tif (typeof listeners === 'object') {\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\telse listeners.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ((listeners === listener) ||\n\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\tdelete data[type];\n\t\t}\n\t}\n\n\treturn this;\n};\n\nemit = function (type) {\n\tvar i, l, listener, listeners, args;\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\tlisteners = this.__ee__[type];\n\tif (!listeners) return;\n\n\tif (typeof listeners === 'object') {\n\t\tl = arguments.length;\n\t\targs = new Array(l - 1);\n\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\tlisteners = listeners.slice();\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\tapply.call(listener, this, args);\n\t\t}\n\t} else {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tcall.call(listeners, this);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t}\n\t\t\tapply.call(listeners, this, args);\n\t\t}\n\t}\n};\n\nmethods = {\n\ton: on,\n\tonce: once,\n\toff: off,\n\temit: emit\n};\n\ndescriptors = {\n\ton: d(on),\n\tonce: d(once),\n\toff: d(off),\n\temit: d(emit)\n};\n\nbase = defineProperties({}, descriptors);\n\nmodule.exports = exports = function (o) {\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n","\"use strict\";\n\nvar isValue         = require(\"type/value/is\")\n  , isPlainFunction = require(\"type/plain-function/is\")\n  , assign          = require(\"es5-ext/object/assign\")\n  , normalizeOpts   = require(\"es5-ext/object/normalize-options\")\n  , contains        = require(\"es5-ext/string/#/contains\");\n\nvar d = (module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif (arguments.length < 2 || typeof dscr !== \"string\") {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (isValue(dscr)) {\n\t\tc = contains.call(dscr, \"c\");\n\t\te = contains.call(dscr, \"e\");\n\t\tw = contains.call(dscr, \"w\");\n\t} else {\n\t\tc = w = true;\n\t\te = false;\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n});\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== \"string\") {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (!isValue(get)) {\n\t\tget = undefined;\n\t} else if (!isPlainFunction(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (!isValue(set)) {\n\t\tset = undefined;\n\t} else if (!isPlainFunction(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (isValue(dscr)) {\n\t\tc = contains.call(dscr, \"c\");\n\t\te = contains.call(dscr, \"e\");\n\t} else {\n\t\tc = true;\n\t\te = false;\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n","\"use strict\";\n\nvar isFunction = require(\"../function/is\");\n\nvar classRe = /^\\s*class[\\s{/}]/, functionToString = Function.prototype.toString;\n\nmodule.exports = function (value) {\n\tif (!isFunction(value)) return false;\n\tif (classRe.test(functionToString.call(value))) return false;\n\treturn true;\n};\n","\"use strict\";\n\nvar isPrototype = require(\"../prototype/is\");\n\nmodule.exports = function (value) {\n\tif (typeof value !== \"function\") return false;\n\n\tif (!hasOwnProperty.call(value, \"length\")) return false;\n\n\ttry {\n\t\tif (typeof value.length !== \"number\") return false;\n\t\tif (typeof value.call !== \"function\") return false;\n\t\tif (typeof value.apply !== \"function\") return false;\n\t} catch (error) {\n\t\treturn false;\n\t}\n\n\treturn !isPrototype(value);\n};\n","\"use strict\";\n\nvar isObject = require(\"../object/is\");\n\nmodule.exports = function (value) {\n\tif (!isObject(value)) return false;\n\ttry {\n\t\tif (!value.constructor) return false;\n\t\treturn value.constructor.prototype === value;\n\t} catch (error) {\n\t\treturn false;\n\t}\n};\n","\"use strict\";\n\nvar isValue = require(\"../value/is\");\n\n// prettier-ignore\nvar possibleTypes = { \"object\": true, \"function\": true, \"undefined\": true /* document.all */ };\n\nmodule.exports = function (value) {\n\tif (!isValue(value)) return false;\n\treturn hasOwnProperty.call(possibleTypes, typeof value);\n};\n","\"use strict\";\n\nmodule.exports = require(\"./is-implemented\")() ? Object.assign : require(\"./shim\");\n","\"use strict\";\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== \"function\") return false;\n\tobj = { foo: \"raz\" };\n\tassign(obj, { bar: \"dwa\" }, { trzy: \"trzy\" });\n\treturn obj.foo + obj.bar + obj.trzy === \"razdwatrzy\";\n};\n","\"use strict\";\n\nvar keys  = require(\"../keys\")\n  , value = require(\"../valid-value\")\n  , max   = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, length = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry {\n\t\t\tdest[key] = src[key];\n\t\t} catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < length; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n","\"use strict\";\n\nmodule.exports = require(\"./is-implemented\")() ? Object.keys : require(\"./shim\");\n","\"use strict\";\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys(\"primitive\");\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n","\"use strict\";\n\nvar isValue = require(\"../is-value\");\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };\n","\"use strict\";\n\n// eslint-disable-next-line no-empty-function\nmodule.exports = function () {};\n","\"use strict\";\n\nvar isValue = require(\"./is-value\");\n\nmodule.exports = function (value) {\n\tif (!isValue(value)) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n","\"use strict\";\n\nvar isValue = require(\"./is-value\");\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\n// eslint-disable-next-line no-unused-vars\nmodule.exports = function (opts1/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (!isValue(options)) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n","\"use strict\";\n\nmodule.exports = require(\"./is-implemented\")() ? String.prototype.contains : require(\"./shim\");\n","\"use strict\";\n\nvar str = \"razdwatrzy\";\n\nmodule.exports = function () {\n\tif (typeof str.contains !== \"function\") return false;\n\treturn str.contains(\"dwa\") === true && str.contains(\"foo\") === false;\n};\n","\"use strict\";\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n","\"use strict\";\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== \"function\") throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n","\nif ('performance' in window === false) {\n  window.performance = {}\n}\n\nDate.now = (Date.now || function () { // thanks IE8\n  return new Date().getTime()\n})\n\nif ('now' in window.performance === false) {\n  var nowOffset = Date.now()\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart\n  }\n\n  window.performance.now = function now () {\n    return Date.now() - nowOffset\n  }\n}\n\nclass RAF {\n  constructor () {\n    this.funcs = {}\n    this.lastPass = {}\n    this.framerates = {}\n    this.nextFramePendingFuncs = []\n    this.nextFrameFuncs = []\n    this.postFrameFuncs = []\n    this.dt = Infinity\n    this.timeElapsed = 0\n    this.frame = 0\n    this.dictonary = []\n    this.last = performance.now()\n    this.initTime = performance.now()\n    this.init()\n    this.isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)\n  }\n\n  suscribe (id, func, framerate = null) {\n    this.dictonary.push(id)\n    this.funcs[id] = func\n    this.lastPass[id] = Date.now()\n\n    if (framerate !== null) {\n      this.framerates[id] = 1 / framerate\n    } else {\n      this.framerates[id] = framerate\n      // this.framerates[id] = framerate\n    }\n  }\n\n  unsuscribe (id) {\n    if (this.funcs[id]) {\n      this.dictonary.splice(this.dictonary.indexOf(id), 1)\n      delete this.funcs[id]\n    }\n  }\n\n  init () {\n    this.update = this.update.bind(this)\n    this.update()\n  }\n\n  nextFrame(func){\n    this.nextFramePendingFuncs.push(func)\n  }\n\n  postFrame(func){\n    this.postFrameFuncs.push(func)\n  }\n\n  update () {\n    requestAnimationFrame(this.update)\n\n\n    this.frame++ \n    if (this.isIOS) {\n      this.dt = 16\n    } else {\n      this.dt = performance.now() - this.last\n    }\n    this.timeElapsed += this.dt\n\n    while (this.nextFrameFuncs.length > 0) {\n      this.nextFrameFuncs.splice(0, 1)[0]()\n    }\n    while (this.nextFramePendingFuncs.length > 0) {\n      this.nextFrameFuncs.push(this.nextFramePendingFuncs.splice(0, 1)[0])\n    }\n\n    let now = Date.now()\n    for (let i = 0; i < this.dictonary.length; i++) {\n      if (this.framerates[this.dictonary[i]] !== null && (now - this.lastPass[this.dictonary[i]]) < (this.framerates[this.dictonary[i]] * 1000)) {\n        continue\n      }\n      if (typeof this.funcs[this.dictonary[i]] === 'function') {\n        this.lastPass[this.dictonary[i]] = now\n        this.funcs[this.dictonary[i]]()\n      }\n    }\n\n    while (this.postFrameFuncs.length > 0) {\n      this.postFrameFuncs.splice(0, 1)[0]()\n    }\n\n    this.last = performance.now()\n  }\n}\nconst out = new RAF()\nexport default out\n","export default {\n    // no easing, no acceleration\n    linear: t => t,\n    // accelerating from zero velocity\n    easeInQuad: t => t * t,\n    // decelerating to zero velocity\n    easeOutQuad: t => t * (2 - t),\n    // acceleration until halfway, then deceleration\n    easeInOutQuad: t => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n    // accelerating from zero velocity \n    easeInCubic: t => t * t * t,\n    // decelerating to zero velocity \n    easeOutCubic: t => (--t) * t * t + 1,\n    // acceleration until halfway, then deceleration \n    easeInOutCubic: t => t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n    // accelerating from zero velocity \n    easeInQuart: t => t * t * t * t,\n    // decelerating to zero velocity \n    easeOutQuart: t => 1 - (--t) * t * t * t,\n    // acceleration until halfway, then deceleration\n    easeInOutQuart: t => t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t,\n    // accelerating from zero velocity\n    easeInQuint: t => t * t * t * t * t,\n    // decelerating to zero velocity\n    easeOutQuint: t => 1 + (--t) * t * t * t * t,\n    // acceleration until halfway, then deceleration \n    easeInOutQuint: t => t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t\n}","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();"],"sourceRoot":""}